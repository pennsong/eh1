<?php
function cw_general_menu()
{
	$items['node/%/fit_talent_list'] = array(
		'title'=>'Fit talent list',
		'description'=>'talents fit this job.',
		'type'=>MENU_LOCAL_TASK,
		'page callback'=>'cw_general_fit_talent',
		'page arguments'=> array(1),
		'access callback'=>'cw_general_check_fit_talent_access',
		'access arguments'=> array(1),
	);
	$items['interview_choose_option_day/%'] = array(
		'page callback'=>'cw_general_get_interview_choose_option_day',
		'page arguments'=> array(1),
		'type'=>MENU_CALLBACK,
		'access callback'=>TRUE,
	);
	$items['interview_choose_option_hour/%/%'] = array(
		'page callback'=>'cw_general_get_interview_choose_option_hour',
		'page arguments'=> array(
			1,
			2
		),
		'type'=>MENU_CALLBACK,
		'access callback'=>TRUE,
	);
	$items['interview_choose_option_minute/%/%/%'] = array(
		'page callback'=>'cw_general_get_interview_choose_option_minute',
		'page arguments'=> array(
			1,
			2,
			3
		),
		'type'=>MENU_CALLBACK,
		'access callback'=>TRUE,
	);
	return $items;
}

function cw_general_get_interview_choose_option($interview_invite)
{
	$interview_invite_obj = node_load($interview_invite);
	$interview_arrangement = node_load($interview_invite_obj->field_interview_arrangement['und'][0]['target_id']);
	if (!empty($interview_arrangement->field_interview_duration['und'][0]['value']) && $interview_arrangement->field_interview_duration['und'][0]['value'] <= 30)
	{
		//面试时间点间隔分钟数
		$interval = 30;
	}
	else
	{
		//面试时间点间隔分钟数
		$interval = 60;
	}
	//所有可选时间
	$option = array();
	$wrapper = entity_metadata_wrapper('node', $interview_arrangement);
	foreach ($wrapper->field_interview_choose as $i)
	{
		$start_time = $i->field_start_time->value();
		$end_time = $i->field_end_time->value();
		//开始时间取整
		if (date("i", $start_time) != 0)
		{
			// add interval to the time
			$start_time = $start_time + ($interval * 60);
		}
		// round DOWN to nearest half hour
		$start_time = floor($start_time / ($interval * 60)) * ($interval * 60);
		//结束时间取整
		// round DOWN to nearest half hour
		$end_time = floor($end_time / ($interval * 60)) * ($interval * 60);
		$tNow = $start_time;
		$tEnd = $end_time;
		while ($tNow <= $tEnd)
		{
			$day = date("Y_m_d", $tNow);
			$hour = date("H", $tNow);
			$minute = date("i", $tNow);
			if (!isset($option[$day]))
			{
				$option[$day] = array();
			}
			if (!isset($option[$day][$hour]))
			{
				$option[$day][$hour] = array();
			}
			if (!in_array($minute, $option[$day][$hour]))
			{
				array_push($option[$day][$hour], $minute);
			}
			$tNow = strtotime('+'.$interval.' minutes', $tNow);
		}
	}
	ksort($option);
	//取得已经预约的时间点
	$get_term = taxonomy_get_term_by_name('接受', 'invite_status');
	$term_id =          array_pop($get_term)->tid;
	$sub_query = new EntityFieldQuery();
	$sub_query->entityCondition('entity_type', 'node')->entityCondition('bundle', 'interview_invite')->propertyCondition('status', 1)->fieldCondition('field_interview_status', 'tid', $term_id, '=');
	$sub_result = $sub_query->execute();
	$option_occupied = array();
	if (isset($sub_result['node']))
	{
		foreach ($sub_result['node'] as $sub_node)
		{
			$sub_interview_invite = node_load($sub_node->nid);
			$wrapper = entity_metadata_wrapper('node', $sub_interview_invite);
			$tNow = $wrapper->field_interview_time_start->value();
			$day = date("Y_m_d", $tNow);
			$hour = date("H", $tNow);
			$minute = date("i", $tNow);
			if (!isset($option_occupied[$day]))
			{
				$option_occupied[$day] = array();
			}
			if (!isset($option_occupied[$day][$hour]))
			{
				$option_occupied[$day][$hour] = array();
			}
			if (!in_array($minute, $option_occupied[$day][$hour]))
			{
				array_push($option_occupied[$day][$hour], $minute);
			}
		}
	}
	foreach ($option_occupied as $id_d=>$item_d)
	{
		foreach ($item_d as $id_h=>$item_h)
		{
			foreach ($item_h as $id_m=>$item_m)
			{
				if (isset($option[$id_d][$id_h][$id_m]))
				{
					unset($option[$id_d][$id_h][$id_m]);
				}
			}
			if (empty($option[$id_d][$id_h]))
			{
				unset($option[$id_d][$id_h]);
			}
		}
		if (empty($option[$id_d]))
		{
			unset($option[$id_d]);
		}
	}
	return $option;
}

function cw_general_get_interview_choose_option_day($interview_invite)
{
	$option = cw_general_get_interview_choose_option($interview_invite);
	//有统一安排面试时间供选择
	//使用$option中元素构造时间选择列表
	echo '<select class="choose_day">';
	echo '<option value="">请选择</option>';
	foreach ($option as $id=>$item)
	{
		echo '<option value="'.$id.'">'.$id.'</option>';
	}
	echo "</select>";
}

function cw_general_get_interview_choose_option_hour($interview_invite, $day)
{
	$option = cw_general_get_interview_choose_option($interview_invite);
	//有统一安排面试时间供选择
	//使用$option中元素构造时间选择列表
	echo '<select class="choose_hour">';
	echo '<option value="">请选择</option>';
	foreach ($option[$day] as $id=>$item)
	{
		echo '<option value="'.$id.'">'.$id.'</option>';
	}
	echo "</select>";
}

function cw_general_get_interview_choose_option_minute($interview_invite, $day, $hour)
{
	$option = cw_general_get_interview_choose_option($interview_invite);
	//有统一安排面试时间供选择
	//使用$option中元素构造时间选择列表
	echo '<select class="choose_minute">';
	echo '<option value="">请选择</option>';
	foreach ($option[$day][$hour] as $id=>$item)
	{
		echo '<option value="'.$item.'">'.$item.'</option>';
	}
	echo "</select>";
}

function cw_general_check_fit_talent_access($nid)
{
	global $user;
	$node = node_load($nid);
	return (($node->type == 'job') && ($node->uid == $user->uid));
}

function cw_general_fit_talent($nid)
{
	//get job requirement
	$job = node_load($nid);
	$query = new EntityFieldQuery();
	$query->entityCondition('entity_type', 'node')->entityCondition('bundle', 'talent')->propertyCondition('status', 1);
	if (!empty($job->field_job_height_from['und'][0]['value']))
	{
		$query = $query->fieldCondition('field_talent_height', 'value', $job->field_job_height_from['und'][0]['value'], '>=');
	}
	if (!empty($job->field_job_height_to['und'][0]['value']))
	{
		$query = $query->fieldCondition('field_talent_height', 'value', $job->field_job_height_to['und'][0]['value'], '<=');
	}
	if (!empty($job->field_job_sex['und'][0]['tid']))
	{
		$query = $query->fieldCondition('field_talent_sex', 'tid', array($job->field_job_sex['und'][0]['tid']));
	}
	if (!empty($job->field_job_education['und'][0]['value']))
	{
		$query = $query->fieldCondition('field_talent_education', 'value', $job->field_job_education['und'][0]['value'], '>=');
	}
	if (!empty($job->field_job_city['und'][0]['tid']))
	{
		$query = $query->fieldCondition('field_talent_city', 'tid', array($job->field_job_city['und'][0]['tid']));
	}
	$query = $query->propertyOrderBy('created', 'DESC')->pager(3);
	$result = $query->execute();
	$output = '';
	if (!empty($result['node']))
	{
		$nids = array_keys($result['node']);
		$nodes = node_load_multiple($nids);
		$output = drupal_render(node_view_multiple($nodes));
		$output .= theme('pager', array('nodes'=>$nodes));
	}
	else
	{
		$output = t('No Result');
	}
	return $output;
}

/**
 * Implementation of hook_views_api().
 */
function cw_general_views_api()
{
	return array(
		'api'=>3.0,
		'path'=>drupal_get_path('module', 'cw_general').'/includes'
	);
}

function cw_general_views_query_alter(&$view, &$query)
{
	if ($view->name == 'job_list')
	{
		// make sure this is the correct view
		if (count($query->where[1]['conditions']))
		{
			foreach ($query->where[1]['conditions'] as &$cond)
			{
				if (is_string($cond['field']) && $cond['field'] == 'field_data_field_job_education.field_job_education_value')
				{
					$cond['operator'] = '<=';
					// override the operator (greater than and equal to)
				}
			}
		}
	}
	else if ($view->name == 'talent_list')
	{
		if (count($query->where[1]['conditions']))
		{
			foreach ($query->where[1]['conditions'] as &$cond)
			{
				if (is_string($cond['field']) && $cond['field'] == 'field_data_field_talent_height.field_talent_height_value')
				{
					if ($cond['value'][1] == '')
					{
						$cond['value'][1] = '999';
					}
					// override the operator (greater than and equal to)
				}
				else if (is_string($cond['field']) && $cond['field'] == 'field_data_field_talent_education.field_talent_education_value')
				{
					$cond['operator'] = '>=';
					// override the operator (greater than and equal to)
				}
			}
		}
	}
}
