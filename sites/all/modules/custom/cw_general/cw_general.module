<?php
/**
 * Implements hook_entity_info_alter().
 */
function cw_general_entity_info_alter(&$entity_info)
{
	$entity_info['node']['view modes']['company_teaser'] = array(
		'label'=>t('Company teaser'),
		'custom settings'=>TRUE,
	);
}

function cw_general_menu()
{
	$items['test'] = array(
		'type'=>MENU_CALLBACK,
		'page callback'=>'cw_general_test',
		'access callback'=>TRUE
	);
	$items['reject_direct/%/%'] = array(
		'type'=>MENU_CALLBACK,
		'page callback'=>'cw_general_reject_direct',
		'access callback'=>TRUE,
		'page arguments'=> array(
			1,//job
			2,//talent
			)
	);	
	$items['send_interview_invite/%/%/%/%/%'] = array(
		'type'=>MENU_CALLBACK,
		'page callback'=>'cw_general_send_interview_invite',
		'page arguments'=> array(
			1,//job
			2,//talent
			3,//interview_arrange type: '1':set time, '2':user arrangement
			4,//time or interview_arrangement id
			5,//address
		),
		'access callback'=>TRUE
	);
	$items['send_offer_direct/%/%/%/%/%/%/%'] = array(
		'type'=>MENU_CALLBACK,
		'page callback'=>'cw_general_send_offer_direct',
		'page arguments'=> array(
			1,//job
			2,//talent
			3,//time
			4,//address
			5,//contact
			6,//title
			7,//content
		),
		'access callback'=>TRUE
	);	
	$items['node/%/choose_talent'] = array(
		'title'=>'挑选人才',
		'description'=>'为职位挑选人才.',
		'type'=>MENU_CALLBACK,
		'page callback'=>'cw_general_choose_talent',
		'page arguments'=> array(1),
		'access callback'=>'cw_general_check_fit_talent_access',
		'access arguments'=> array(1),
	);
	$items['node/%/fit_talent_list'] = array(
		'title'=>'Fit talent list',
		'description'=>'talents fit this job.',
		'type'=>MENU_LOCAL_TASK,
		'page callback'=>'cw_general_fit_talent',
		'page arguments'=> array(1),
		'access callback'=>'cw_general_check_fit_talent_access',
		'access arguments'=> array(1),
	);
	$items['interview_choose_option_day/%'] = array(
		'page callback'=>'cw_general_get_interview_choose_option_day',
		'page arguments'=> array(1),
		'type'=>MENU_CALLBACK,
		'access callback'=>TRUE,
	);
	$items['interview_choose_option_hour/%/%'] = array(
		'page callback'=>'cw_general_get_interview_choose_option_hour',
		'page arguments'=> array(
			1,
			2
		),
		'type'=>MENU_CALLBACK,
		'access callback'=>TRUE,
	);
	$items['interview_choose_option_minute/%/%/%'] = array(
		'page callback'=>'cw_general_get_interview_choose_option_minute',
		'page arguments'=> array(
			1,
			2,
			3
		),
		'type'=>MENU_CALLBACK,
		'access callback'=>TRUE,
	);
	$items['interview_reply/%/%/%'] = array(
		'page callback'=>'cw_general_interview_reply',
		'page arguments'=> array(
			1,
			2,
			3
		), //1: interview_invite_id, 2:"accept_interview" or "reject_interview", 3:interview time or reject_note
		'type'=>MENU_CALLBACK,
		'access callback'=>'cw_interview_reply_access',
		'access arguments'=> array(1),
	);
	$items['offer_reply/%/%/%'] = array(
		'page callback'=>'cw_general_offer_reply',
		'page arguments'=> array(
			1,
			2,
			3
		), //1: offer_id, 2:"accept_offer" or "reject_offer", 3:'' or reject_note
		'type'=>MENU_CALLBACK,
		'access callback'=>'cw_offer_reply_access',
		'access arguments'=> array(1),
	);
	$items['interview_dynamic_area/%'] = array(
		'page callback'=>'cw_general_interview_dynamic_area_get',
		'page arguments'=> array(1), //trade
		'type'=>MENU_CALLBACK,
		'access callback'=>'cw_interview_ajax_access',
		'access arguments'=> array(1), //trade
	);
	$items['trade_status_area/%'] = array(
		'page callback'=>'cw_general_trade_status_area',
		'page arguments'=> array(1), //trade
		'type'=>MENU_CALLBACK,
		'access callback'=>'cw_interview_ajax_access',
		'access arguments'=> array(1), //trade
	);
	$items['hunter_interview_stage_trade'] = array(
		'page callback'=>'cw_general_hunter_interview_stage_trade',
		'type'=>MENU_CALLBACK,
		'access callback'=>TRUE,
	);
	$items['hunter_offer_stage_trade'] = array(
		'page callback'=>'cw_general_hunter_offer_stage_trade',
		'type'=>MENU_CALLBACK,
		'access callback'=>TRUE,
	);
	$items['hunter_position_stage_trade'] = array(
		'page callback'=>'cw_general_hunter_position_stage_trade',
		'type'=>MENU_CALLBACK,
		'access callback'=>TRUE,
	);
	$items['hunter_finished_trade'] = array(
		'page callback'=>'cw_general_hunter_finished_trade',
		'type'=>MENU_CALLBACK,
		'access callback'=>TRUE,
	);
	$items['trade_hunter_score/%'] = array(
		'page callback'=>'cw_general_trade_hunter_score',
		'page arguments'=> array(1), //trade_hunter_score
		'type'=>MENU_CALLBACK,
		'access callback'=>TRUE,
	);
	$items['score_to_company/%/%'] = array(
		'page callback'=>'cw_general_score_to_company',
		'page arguments'=> array(
			1,
			2
		), //trade, score
		'type'=>MENU_CALLBACK,
		'access callback'=>TRUE,
	);
	return $items;
}

function cw_general_reject_direct($talent, $job)
{
	//新建交易,设置为不再考虑
	global $user;
	// Create an Entity
	$trade = entity_create('node', array('type'=>'trade'));
	// Create a Entity Wrapper of that new Entity
	$trade_entity = entity_metadata_wrapper('node', $trade);
	$trade_entity->author = $user->uid;
	$trade_entity->title = $talent.'to'.$job;
	$trade_entity->field_trade_talent = $talent;
	$trade_entity->field_trade_job = $job;
	$trade_entity->field_trade_status = array_pop(taxonomy_get_term_by_name('不再考虑', 'term_trade_status'))->tid;
	// Save the node.
	$new_trade = $trade_entity->save();

	if ($new_trade->nid->value() > 0)
	{
		echo 'success';
	}
	else
	{
		echo 'failed';	
	}
}

/*
* 方法 isDate
* 功能 判断日期格式是否正确
* 参数 $str 日期字符串
$format 日期格式
* 返回 无
*/
function cw_general_is_Date($str,$format='Y-m-d H:i'){
	$unixTime_1=strtotime($str);
	if(!is_numeric($unixTime_1)) return false; //如果不是数字格式，则直接返回
	$checkDate=date($format,$unixTime_1);
	$unixTime_2=strtotime($checkDate);
	if($unixTime_1==$unixTime_2){
		return true;
	}else{
		return false;
	}
}


function cw_general_send_offer_direct($talent, $job, $time, $address, $contact, $title, $content)
{
	//判断时间格式
	if (!cw_general_is_Date($time))
	{
		echo '日期格式错误,应该为2012-10-01 19:00格式';
		return;
	}
	else
	{
		$time = strtotime($time);
	}
	//新建交易,设置为offer邀请
	global $user;
	// Create an Entity
	$trade = entity_create('node', array('type'=>'trade'));
	// Create a Entity Wrapper of that new Entity
	$trade_entity = entity_metadata_wrapper('node', $trade);
	$trade_entity->author = $user->uid;
	$trade_entity->title = $talent.'to'.$job;
	$trade_entity->field_trade_talent = $talent;
	$trade_entity->field_trade_job = $job;
	$trade_entity->field_trade_status = array_pop(taxonomy_get_term_by_name('offer邀请', 'term_trade_status'))->tid;
	// Save the node.
	$new_trade = $trade_entity->save();

	if ($new_trade->nid->value() > 0)
	{
		//新建offer,设置为邀请状态
		// Create an Entity
		$offer_entity = entity_create('node', array('type'=>'offer'));
		// Create a Entity Wrapper of that new Entity
		$offer_wrapper = entity_metadata_wrapper('node', $offer_entity);
		$offer_wrapper->author = $user->uid;
		$offer_wrapper->title = $title;
		$offer_wrapper->field_offer_trade = $new_trade->nid->value();
		$offer_wrapper->field_offer_address = $address;
		$offer_wrapper->field_offer_contact = $contact;
		$offer_wrapper->field_offer_body = $content;
		$offer_wrapper->field_calendar_date = $time;							
		$offer_wrapper->field_offer_status = array_pop(taxonomy_get_term_by_name('发出', 'invite_status'))->tid;
		// Save the node.
		$new_offer = $offer_wrapper->save();
		if ($new_offer->nid->value() > 0)
		{
			echo "success";
		}
	}
	else
	{
		echo "failed";
	}	
}

function cw_general_send_interview_invite($talent, $job, $type, $time, $address)
{
	//判断时间格式
	if ($type == 1 && !cw_general_is_Date($time))
	{
		echo '日期格式错误,应该为2012-10-01 19:00格式';
		return;
	}
	else if($type == 1)
	{
		$time = strtotime($time);
	}
	//新建交易,设置为面试邀请状态
	global $user;
	// Create an Entity
	$trade = entity_create('node', array('type'=>'trade'));
	// Create a Entity Wrapper of that new Entity
	$trade_entity = entity_metadata_wrapper('node', $trade);
	$trade_entity->author = $user->uid;
	$trade_entity->title = $talent.'to'.$job;
	$trade_entity->field_trade_talent = $talent;
	$trade_entity->field_trade_job = $job;
	$trade_entity->field_trade_status = array_pop(taxonomy_get_term_by_name('面试邀请', 'term_trade_status'))->tid;
	// Save the node.
	$new_trade = $trade_entity->save();

	if ($new_trade->nid->value() > 0)
	{
		//新建面试邀请,设置为邀请状态
		// Create an Entity
		$interview_invite = entity_create('node', array('type'=>'interview_invite'));
		// Create a Entity Wrapper of that new Entity
		$interview_invite = entity_metadata_wrapper('node', $interview_invite);
		$interview_invite->author = $user->uid;
		$interview_invite->title = $new_trade->nid->value().'的面试邀请';
		$interview_invite->field_interview_trade = $new_trade->nid->value();
		$interview_invite->field_interview_status = array_pop(taxonomy_get_term_by_name('发出', 'invite_status'))->tid;
		//处理面试时间类型
		if ($type == 1)
		{
			//set time
			$interview_invite->field_calendar_date = $time;
			$interview_invite->field_interview_invite_address = $address;
		}
		else if ($type == 2)
		{
			$interview_invite->field_interview_arrangement = $time;
		}
		// Save the node.
		$new_interview_invite = $interview_invite->save();
		if ($new_interview_invite->nid->value() > 0)
		{
			echo "success";
		}
	}
	else
	{
		echo "failed";
	}	
}



function cw_general_fit_talent_num($job)
{
	$query = cw_general_fit_talent_query($job);
	$result = $query->execute();
	if (!empty($result['node']))
	{
		return count($result['node']);
	}
	else
	{
		return 0;
	}
}

function cw_general_fit_talent_query($job)
{
	//取得职位信息
	$job_entity = entity_metadata_wrapper('node', $job);
	//匹配人才
	$query = new EntityFieldQuery();
	$query->entityCondition('entity_type', 'node')->entityCondition('bundle', 'talent')->propertyCondition('status', 1);
	$test = $job_entity->field_job_job_type->value();
	if (!empty($test))
	{
		$query = $query->fieldCondition('field_talent_job_type', 'tid', $test->tid);
	}
	$test = $job_entity->field_job_height_from->value();
	if (!empty($test))
	{
		$query = $query->fieldCondition('field_talent_height', 'value', $test, '>=');
	}
	$test = $job_entity->field_job_height_to->value();
	if (!empty($test))
	{
		$query = $query->fieldCondition('field_talent_height', 'value', $test, '<=');
	}
	$test = $job_entity->field_job_sex->value();
	if (!empty($test))
	{
		$query = $query->fieldCondition('field_talent_sex', 'tid', $test->tid);
	}
	$test = $job_entity->field_job_education->value();
	if (!empty($test))
	{
		$query = $query->fieldCondition('field_talent_education', 'value', $test, '>=');
	}
	$test = $job_entity->field_job_city->value();
	if (!empty($test))
	{
		$query = $query->fieldCondition('field_talent_city', 'tid', $test->tid);
	}
	//过滤三个月内有失败交易的人才
	$subquery = new EntityFieldQuery();
	$subquery->entityCondition('entity_type', 'node')->entityCondition('bundle', 'trade')->propertyCondition('status', 1);
	//	$subquery = $subquery->fieldCondition('field_trade_status', 'tid', cw_general_get_failed_trade_status_tid(), 'IN');
	$subquery = $subquery->fieldCondition('field_trade_job', 'target_id', $job);
	$subquery = $subquery->propertyCondition('changed', strtotime('-3 month'), '>=');
	$result = $subquery->execute();
	$ban_talent_list = array(0);
	if (!empty($result['node']))
	{
		foreach ($result['node'] as $item)
		{
			$trade_wrapper = entity_metadata_wrapper('node', $item->nid);
			array_push($ban_talent_list, $trade_wrapper->field_trade_talent->value()->nid);
		}
	}
	$query = $query->entityCondition('entity_id', $ban_talent_list, 'NOT IN');
	return $query;
}

function cw_general_test()
{

}

function cw_general_get_failed_trade_status_tid()
{
	$failed_status_tid_list = array();
	array_push($failed_status_tid_list,  array_pop(taxonomy_get_term_by_name('拒绝offer', 'term_trade_status'))->tid);
	array_push($failed_status_tid_list,  array_pop(taxonomy_get_term_by_name('拒绝面试', 'term_trade_status'))->tid);
	array_push($failed_status_tid_list,  array_pop(taxonomy_get_term_by_name('未到岗', 'term_trade_status'))->tid);
	array_push($failed_status_tid_list,  array_pop(taxonomy_get_term_by_name('面试被拒', 'term_trade_status'))->tid);
	return $failed_status_tid_list;
}

function cw_general_choose_talent($job)
{
	$output = '';
	//js code
	global $base_url;
	global $user;
$jsstr = <<<EOD
	<script>
	(function($){
		$(document).ready(function()
		{
			$(".reject_button").click(function(){
				var root = $(this);
				var r=confirm("此人才将在3个月内不出现在此列表中,确定要拒绝么?");
				if (r==true)
				{
					var ajaxURL = '$base_url' + '/reject_direct/' + $(this).parent().siblings(".talent_id").val() + '/' + $("#job_id").val();
					$.ajax({
					  url: ajaxURL,
					  success: function(data) {
					  	if (data == 'success')
					  	{
					  		alert('操作成功!');				   
					    	root.parent().parent().hide();
					  	}
					  	else
					  	{
					  		alert(data+',操作失败!');
					  	}
					  }
					});					
				}
				else
				{
				}
			});
			
			$(".interview_invite_button").click(function(){
				$(".sub").hide();
				$(this).siblings(".sub").show();
				var str = $(".choose_arrange_template").html();
				$(this).siblings(".sub").children(".arrange_div").html(str);
			});
			$(".offer_button").click(function(){
				$(".sub").hide();
				$(this).siblings(".sub").show();
			});
			$(".cancel").click(function(){
				$(this).parent().parent().hide();
			});
			$(".interview_arrange_submit").click(function(){
				var root = $(this);
				var interview_time = $(this).parent().siblings().children(".choose_arrange").val();
				if (!interview_time)
				{
					alert('面试安排必须填写!');
					return;
				}
				var ajaxURL = '$base_url' + '/send_interview_invite/' + $(this).parent().parent().parent().siblings(".talent_id").val() + '/' + $("#job_id").val() + '/' + '2' + '/' + interview_time + '/' + 'address';
				$.ajax({
				  url: ajaxURL,
				  success: function(data) {
				  	if (data == 'success')
				  	{
				  		alert('操作成功!');				   
				    	root.parent().parent().parent().parent().hide();
				  	}
				  	else
				  	{
				  		alert(data+',操作失败!');
				  	}
				  }
				});
			});
			$(".interview_time_submit").click(function(){
				var root = $(this);
				var interview_time = $(this).parent().siblings().children(".time").val();
				var address = $(this).parent().siblings().children(".address").val();
				if (!interview_time || !address)
				{
					alert('时间地址都必须填写!');
					return;
				}
				var ajaxURL = '$base_url' + '/send_interview_invite/' + $(this).parent().parent().parent().siblings(".talent_id").val() + '/' + $("#job_id").val() + '/' + '1' + '/' + interview_time + '/' + address;
				$.ajax({
				  url: ajaxURL,
				  success: function(data) {
				  	if (data == 'success')
				  	{
				  		alert('操作成功!');				   
				    	root.parent().parent().parent().parent().hide();
				  	}
				  	else
				  	{
				  		alert(data+',操作失败!');
				  	}
				  }
				});
			});
		$(".offer_submit").click(function(){
				var root = $(this);
				var offer_time = $(this).parent().siblings().children(".time").val();
				var address = $(this).parent().siblings().children(".address").val();
				var contact = $(this).parent().siblings().children(".contact").val(); 
				var title = $(this).parent().siblings().children(".title").val(); 
				var content = $(this).parent().siblings().children(".content").val(); 
				if (!offer_time || !address || !contact || !title || !content)
				{
					alert('请填写完整后递交!');
					return;
				}
				var ajaxURL = '$base_url' + '/send_offer_direct/' + $(this).parent().parent().parent().siblings(".talent_id").val() + '/' + $("#job_id").val() + '/' + offer_time + '/' + address + '/' + contact + '/' + title + '/' + content;
				$.ajax({
				  url: ajaxURL,
				  success: function(data) {
				  	if (data == 'success')
				  	{
				  		alert('操作成功!');				   
				    	root.parent().parent().parent().parent().hide();
				  	}
				  	else
				  	{
				  		alert(data+',操作失败!');
				  	}
				  }
				});
			});			
		}); 
	})(jQuery);
	</script>
EOD;
	//取得本公司用户的面试安排列表
	$arrange_query = new EntityFieldQuery();
	$arrange_query->entityCondition('entity_type', 'node')->entityCondition('bundle', 'interview_arrangement')->propertyCondition('status', 1)->propertyCondition('uid', $user->uid);
	$arrange_result = $arrange_query->execute();
	$arrange_select = '<div class="choose_arrange_template" style="display:none"><select class="choose_arrange">';
	if (isset($arrange_result['node']))
	{
		foreach($arrange_result['node'] as $item)
		{
			$arrange_select .= '<option value="'.$item->nid.'">';
			$arrange_select .= node_load($item->nid)->title;
			$arrange_select .= '</option>';
		}
	}
	$arrange_select .= '</select></div>';
	$output .= $jsstr.$arrange_select;
	//生成已招人数
	$recruited_num = 0;
	$get_term = taxonomy_get_term_by_name('交易成功', 'term_trade_status');
	$query = new EntityFieldQuery();
	$query->entityCondition('entity_type', 'node')->entityCondition('bundle', 'trade')->propertyCondition('status', 1)->fieldCondition('field_trade_job', 'target_id', $job, '=')->fieldCondition('field_trade_status', 'tid',   array_pop($get_term)->tid, '=');
	$result = $query->execute();
	if (isset($result['node']))
	{
		$recruited_num = count($result['node']);
	}
	//取得职位信息
	$job_entity = entity_metadata_wrapper('node', $job);
	$test = $job_entity->field_job_sex->value();
	$sex = !empty($test) ? $test->name : '不限';
	$output .= '<input id="job_id" type="hidden" value="'.$job.'" />';
	$output .= '<div style="background-color: #AAAAFF; padding: 5px; vertical-align:middle">';
	$output .= '<div style="display:inline-block; width:70px; vertical-align:middle">'.$job_entity->field_job_city->value()->name.'</div>';
	$output .= '<div style="display:inline-block; width:150px; vertical-align:middle">'.$job_entity->title->value().'</div>';
	$output .= '<div style="display:inline-block; width:100px; vertical-align:middle">'.$job_entity->field_job_salary_from->value().'-'.$job_entity->field_job_salary_to->value().'</div>';
	$output .= '<div style="display:inline-block; width:200px; vertical-align:middle">';
	$output .= '<div>';
	$output .= '性别:'.$sex;
	$output .= '&nbsp;身高:'.$job_entity->field_job_height_from->value().'-'.$job_entity->field_job_height_to->value();
	$output .= '</div>';
	$output .= '<div>';
	$output .= '备注:'.$job_entity->field_job_note->value();
	$output .= '</div>';
	$output .= '</div>';
	$output .= '<div style="display:inline-block; width:70px; vertical-align:middle">已招'.$recruited_num.'人</div>';
	$output .= '</div>';
	$query = cw_general_fit_talent_query($job)->propertyOrderBy('changed', 'DESC')->pager(3);
	$result = $query->execute();
	if (!empty($result['node']))
	{
		$nids = array_keys($result['node']);
		$nodes = node_load_multiple($nids);
		$output .= drupal_render(node_view_multiple($nodes, 'company_talent_view'));
		$output .= theme('pager', array('nodes'=>$nodes));
	}
	else
	{
		$output .= t('没有记录');
	}
	return $output;
}

function cw_general_score_to_company($trade, $score)
{
	global $user;
	// Create an Entity
	$e = entity_create('node', array('type'=>'trade_company_score'));
	// Create a Entity Wrapper of that new Entity
	$entity = entity_metadata_wrapper('node', $e);
	// Specify the author
	$entity->title = $user->uid.'score'.$trade;
	$entity->field_trade_company_score_trade = $trade;
	// Add field data... SO MUCH BETTER!
	$entity->field_trade_company_score_score = $score;
	$entity->author = $user->uid;
	// Save the node.
	$entity->save();
}

function cw_general_trade_hunter_score($trade_hunter_score)
{
	echo '<div style="position:absolute; top: 20px; width=200px">';
	echo drupal_render(node_view(node_load($trade_hunter_score), 'small'));
	echo '</div>';
}

function cw_general_hunter_finished_trade()
{
	//取得失败交易
	$tid1 =                      array_pop(taxonomy_get_term_by_name('拒绝offer', 'term_trade_status'))->tid;
	$tid2 =                      array_pop(taxonomy_get_term_by_name('拒绝面试', 'term_trade_status'))->tid;
	$tid3 =                      array_pop(taxonomy_get_term_by_name('未到岗', 'term_trade_status'))->tid;
	$tid4 =                      array_pop(taxonomy_get_term_by_name('面试被拒', 'term_trade_status'))->tid;
	$tid5 =                      array_pop(taxonomy_get_term_by_name('交易成功', 'term_trade_status'))->tid;
	global $base_url;
	$url = $base_url."/hunter_my_trade_list?field_trade_status_tid[]=".$tid1."&field_trade_status_tid[]=".$tid2."&field_trade_status_tid[]=".$tid3."&field_trade_status_tid[]=".$tid4."&field_trade_status_tid[]=".$tid5;
	drupal_goto($url);
}

function cw_general_hunter_position_stage_trade()
{
	//取得到岗阶段状态
	$tid1 =                      array_pop(taxonomy_get_term_by_name('已到岗', 'term_trade_status'))->tid;
	global $base_url;
	$url = $base_url."/hunter_my_trade_list?field_trade_status_tid[]=".$tid1;
	drupal_goto($url);
}

function cw_general_hunter_interview_stage_trade()
{
	//取得面试阶段状态
	$tid1 =                      array_pop(taxonomy_get_term_by_name('面试邀请', 'term_trade_status'))->tid;
	$tid2 =                      array_pop(taxonomy_get_term_by_name('接受面试', 'term_trade_status'))->tid;
	global $base_url;
	$url = $base_url."/hunter_my_trade_list?field_trade_status_tid[]=".$tid1."&field_trade_status_tid[]=".$tid2;
	drupal_goto($url);
}

function cw_general_hunter_offer_stage_trade()
{
	//取得offer阶段状态
	$tid1 =                      array_pop(taxonomy_get_term_by_name('offer邀请', 'term_trade_status'))->tid;
	$tid2 =                      array_pop(taxonomy_get_term_by_name('接受offer', 'term_trade_status'))->tid;
	global $base_url;
	$url = $base_url."/hunter_my_trade_list?field_trade_status_tid[]=".$tid1."&field_trade_status_tid[]=".$tid2;
	drupal_goto($url);
}

function cw_general_trade_status_area($trade)
{
	$trade_wrapper = entity_metadata_wrapper('node', $trade);
	//取得trade状态
	$status_name = $trade_wrapper->field_trade_status->value()->name;
	$class_str = '';
	$html_str = '';
	if ($status_name == 'offer邀请')
	{
		$class_str = 'offer_invite';
		$html_str = 'offer<br />邀请';
	}
	else if ($status_name == '交易成功')
	{
		$class_str = 'trade_success';
		$html_str = '交易<br />成功';
	}
	else if ($status_name == '已到岗')
	{
		$class_str = 'on_position';
		$html_str = '已<br />到岗';
	}
	else if ($status_name == '拒绝offer')
	{
		$class_str = 'offer_reject';
		$html_str = '拒绝<br />offer';
	}
	else if ($status_name == '拒绝面试')
	{
		$class_str = 'interview_reject';
		$html_str = '拒绝<br />面试';
	}
	else if ($status_name == '接受offer')
	{
		$class_str = 'offer_accept';
		$html_str = '接受<br />offer';
	}
	else if ($status_name == '接受面试')
	{
		$class_str = 'interview_accept';
		$html_str = '接受<br />面试';
	}
	else if ($status_name == '未到岗')
	{
		$class_str = 'no_on_position';
		$html_str = '未<br />到岗';
	}
	else if ($status_name == '面试邀请')
	{
		$class_str = 'interview_invite';
		$html_str = '面试<br />邀请';
	}
	else if ($status_name == '面试被拒')
	{
		$class_str = 'interview_not_pass';
		$html_str = '面试<br />被拒';
	}
	else if ($status_name == '不再考虑')
	{
		$class_str = 'interview_not_pass';
		$html_str = '不再<br />考虑';
	}
	echo '<div style="width:50px; display:inline-block" class="'.$class_str.' trade_status">';
	echo $html_str;
}

function cw_general_interview_dynamic_area_get($trade)
{
	echo cw_general_interview_dynamic_area($trade);
}

function cw_general_interview_dynamic_area($trade)
{
	$result_str = '';
	$trade_wrapper = entity_metadata_wrapper('node', $trade);
	//取得trade状态
	$status_name = $trade_wrapper->field_trade_status->value()->name;
	if ($status_name == '面试邀请')
	{
		$result_str .= '<div class="interview_info" style="width:250px; display:inline-block">';
		//查找最新面试邀请entity
		$query = new EntityFieldQuery();
		$query->entityCondition('entity_type', 'node')->entityCondition('bundle', 'interview_invite')->propertyCondition('status', 1)->fieldCondition('field_interview_trade', 'target_id', $trade, '=')->propertyOrderBy('created', 'DESC')->range(0, 1);
		$result = $query->execute();
		$interview_invite = 0;
		if (isset($result['node']))
		{
			foreach ($result['node'] as $node)
			{
				$interview_invite = $node->nid;
				$interview_invite_obj = node_load($node->nid);
				if (isset($interview_invite_obj->field_calendar_date['und'][0]['value']))
				{
					//明确指定面试时间
					$result_str .= render(field_view_field('node', $interview_invite_obj, 'field_calendar_date', 'small'));
				}
				else
				{
					$result_str .= '面试时间:';
					$result_str .= '<div class=date_choose>';
					$result_str .= '<input class="interview_invite_id" type="hidden" value="'.$node->nid.'"/>';
					$result_str .= '<div class="day" style="display:inline-block">';
					$result_str .= cw_general_get_interview_choose_option_day_widget($interview_invite);
					$result_str .= '</div>';
					$result_str .= '<div class="hour" style="display:inline-block"><select class="choose_hour"><option value="">请选择</option></select></div>';
					$result_str .= '<div class="minute" style="display:inline-block"><select class="choose_minute"><option value="">请选择</option></select></div>';
					$result_str .= '</div>';
				}
				$result_str .= "<div>面试地点:";
				if (!empty($interview_invite_obj->field_interview_invite_address['und'][0]['value']))
				{
					$result_str .= $interview_invite_obj->field_interview_invite_address['und'][0]['value'];
				}
				$result_str .= "</div>";
				$result_str .= "<div>邀请发布时间:";
				$result_str .= date("y/m/d H:i", $interview_invite_obj->created);
				$result_str .= "</div>";
			}
		}
		$result_str .= '</div>';
		$result_str .= '<div class="reply" style="width:46px; display:inline-block">';
		$result_str .= '	<input type="hidden" value="'.$interview_invite.'" />';
		$result_str .= '	<div><button class="accept_interview" type="button">确认面试</button></div>';
		$result_str .= '	<div style="position:relative">';
		$result_str .= '		<button class="reject_interview" type="button">拒绝面试</button>';
		$result_str .= '		<div class="reject_confirm" style="z-index: 1000; display:none; position:absolute; top: 30px; left: -200px; height: 150px; width: 300px; background-color: white; border: 1px black solid; padding: 10px;">';
		$result_str .= '			<div>确认要拒绝?</div>';
		$result_str .= '			<div>(该人才将在三个月内无法再次被匹配该职位)</div>';
		$result_str .= '			<div>拒绝原因:</div>';
		$result_str .= '			<div><textarea class="reject_note"></textarea></div>';
		$result_str .= '			<button class="yes_interview" type="button">确认</button>';
		$result_str .= '			<button class="no_interview" type="button">取消</button>';
		$result_str .= '		</div>';
		$result_str .= '	</div>';
		$result_str .= '</div>';
	}
	else if ($status_name == '接受面试')
	{
		//查找最新面试邀请entity
		$query = new EntityFieldQuery();
		$query->entityCondition('entity_type', 'node')->entityCondition('bundle', 'interview_invite')->propertyCondition('status', 1)->fieldCondition('field_interview_trade', 'target_id', $trade, '=')->propertyOrderBy('created', 'DESC')->range(0, 1);
		$result = $query->execute();
		$interview_invite = 0;
		if (isset($result['node']))
		{
			foreach ($result['node'] as $node)
			{
				$interview_invite = $node->nid;
				$interview_invite_wrapper = entity_metadata_wrapper('node', $interview_invite);
				$result_str .= '<div class="interview_info" style="width:250px; display:inline-block">';
				$result_str .= '<div>';
				$result_str .= '面试时间'.date('Y/m/d H:i', $interview_invite_wrapper->field_calendar_date->value());
				$result_str .= '</div>';
				$result_str .= '<div>';
				$result_str .= '面试地点:'.$interview_invite_wrapper->field_interview_invite_address->value();
				$result_str .= '</div>';
				$result_str .= '</div>';
				$result_str .= '<div class="reply" style="width:46px; display:inline-block">';
				$result_str .= '	<input type="hidden" value="'.$interview_invite.'"/>';
				$result_str .= '	<div style="position:relative">';
				$result_str .= '		<button class="reject_interview" type="button">拒绝面试</button>';
				$result_str .= '		<div class="reject_confirm" style="z-index: 1000; display:none; position:absolute; top: 30px; left: -200px; height: 150px; width: 300px; background-color: white; border: 1px black solid; padding: 10px;">';
				$result_str .= '			<div>确认要拒绝?</div>';
				$result_str .= '			<div>(该人才将在三个月内无法再次被匹配该职位)</div>';
				$result_str .= '			<div>拒绝原因:</div>';
				$result_str .= '			<div><textarea class="reject_note"></textarea></div>';
				$result_str .= '			<button class="yes_interview" type="button">确认</button>';
				$result_str .= '			<button class="no_interview" type="button">取消</button>';
				$result_str .= '		</div>';
				$result_str .= '	</div>';
				$result_str .= '</div>';
			}
		}
	}
	else if ($status_name == '拒绝面试')
	{
		$result_str .= '<div>交易结束原因：主动拒绝面试</div>';
		//查找最新面试邀请entity
		$query = new EntityFieldQuery();
		$query->entityCondition('entity_type', 'node')->entityCondition('bundle', 'interview_invite')->propertyCondition('status', 1)->fieldCondition('field_interview_trade', 'target_id', $trade, '=')->propertyOrderBy('created', 'DESC')->range(0, 1);
		$result = $query->execute();
		$interview_invite = 0;
		if (isset($result['node']))
		{
			foreach ($result['node'] as $node)
			{
				$interview_invite = $node->nid;
				$interview_invite_wrapper = entity_metadata_wrapper('node', $interview_invite);
				$result_str .= '<div>操作备注:'.$interview_invite_wrapper->field_interview_reject_note->value().'</div>';
			}
		}
	}
	else if ($status_name == '面试被拒')
	{
		$result_str .= '<div>交易结束原因：被企业方拒绝</div>';
		$interview_invite_wrapper = entity_metadata_wrapper('node', $trade);
		$result_str .= '<div>操作备注:'.$interview_invite_wrapper->field_trade_company_note->value().'</div>';
	}
	else if ($status_name == 'offer邀请')
	{
		//查找最新offer邀请
		$query = new EntityFieldQuery();
		$query->entityCondition('entity_type', 'node')->entityCondition('bundle', 'offer')->propertyCondition('status', 1)->fieldCondition('field_offer_trade', 'target_id', $trade, '=')->propertyOrderBy('created', 'DESC')->range(0, 1);
		$result = $query->execute();
		if (isset($result['node']))
		{
			foreach ($result['node'] as $node)
			{
				$offer_id = $node->nid;
				$offer_wrapper = entity_metadata_wrapper('node', $offer_id);
				global $base_url;
				$result_str .= '<div class="interview_info" style="width:250px; display:inline-block">';
				$result_str .= '	<div><a href="'.$base_url.'/node/'.$offer_id.'">查看offer</a></div>';
				$result_str .= '	<div>邀请发布时间:'.date('Y-m-d h:i', $offer_wrapper->created->value()).'</div>';
				$result_str .= '</div>';
				$result_str .= '<div class="reply" style="width:46px; display:inline-block">';
				$result_str .= '	<input type="hidden" value="'.$offer_id.'" />';
				$result_str .= '	<div><button class="accept_offer" type="button">确认offer</button></div>';
				$result_str .= '	<div style="position:relative">';
				$result_str .= '		<button class="reject_offer" type="button">拒绝offer</button>';
				$result_str .= '		<div class="reject_confirm" style="z-index: 1000; display:none; position:absolute; top: 30px; left: -200px; height: 150px; width: 300px; background-color: white; border: 1px black solid; padding: 10px;">';
				$result_str .= '			<div>确认要拒绝?</div>';
				$result_str .= '			<div>(该人才将在三个月内无法再次被匹配该职位)</div>';
				$result_str .= '			<div>拒绝原因:</div>';
				$result_str .= '			<div><textarea class="reject_note"></textarea></div>';
				$result_str .= '			<button class="yes_offer" type="button">确认</button>';
				$result_str .= '			<button class="no_offer" type="button">取消</button>';
				$result_str .= '		</div>';
				$result_str .= '	</div>';
				$result_str .= '</div>';
			}
		}
	}
	else if ($status_name == '接受offer')
	{
		//查找最新offer邀请
		$query = new EntityFieldQuery();
		$query->entityCondition('entity_type', 'node')->entityCondition('bundle', 'offer')->propertyCondition('status', 1)->fieldCondition('field_offer_trade', 'target_id', $trade, '=')->propertyOrderBy('created', 'DESC')->range(0, 1);
		$result = $query->execute();
		if (isset($result['node']))
		{
			foreach ($result['node'] as $node)
			{
				$offer_id = $node->nid;
				$offer_wrapper = entity_metadata_wrapper('node', $offer_id);
				//取得对应job
				$job =                         entity_metadata_wrapper('node', $trade)->field_trade_job->value()->nid;
				$job_wrapper = entity_metadata_wrapper('node', $job);
				if ($job_wrapper->field_job_commission_time->value() > 0)
				{
					$commission_date = strtotime("+".$job_wrapper->field_job_commission_time->value()." days", $offer_wrapper->field_calendar_date->value());
				}
				else
				{
					$commission_date = $offer_wrapper->field_calendar_date->value();
				}
				$result_str .= '<div class="offer_info" style="width:250px; display:inline-block">';
				$result_str .= '	<div>上班时间:'.date('Y-m-d h:i', $offer_wrapper->field_calendar_date->value()).'</div>';
				$result_str .= '	<div>上班地点:'.$offer_wrapper->field_offer_address->value().'</div>';
				$result_str .= '	<div>预订佣金日:'.date('Y-m-d', $commission_date).'</div>';
				$result_str .= '</div>';
				$result_str .= '<div class="reply" style="width:46px; display:inline-block">';
				$result_str .= '	<input type="hidden" value="'.$offer_id.'" />';
				$result_str .= '	<div><button class="view_offer" type="button">查看offer</button></div>';
				$result_str .= '</div>';
			}
		}
	}
	else if ($status_name == '拒绝offer')
	{
		$result_str .= '<div>交易结束原因：主动拒绝offer</div>';
		//查找最新offer邀请entity
		$query = new EntityFieldQuery();
		$query->entityCondition('entity_type', 'node')->entityCondition('bundle', 'offer')->propertyCondition('status', 1)->fieldCondition('field_offer_trade', 'target_id', $trade, '=')->propertyOrderBy('created', 'DESC')->range(0, 1);
		$result = $query->execute();
		$offer = 0;
		if (isset($result['node']))
		{
			foreach ($result['node'] as $node)
			{
				$offer = $node->nid;
				$offer_wrapper = entity_metadata_wrapper('node', $offer);
				$result_str .= '<div>操作备注:'.$offer_wrapper->field_offer_reject_note->value().'</div>';
			}
		}
	}
	else if ($status_name == '已到岗')
	{
		//查找最新offer邀请entity
		$query = new EntityFieldQuery();
		$query->entityCondition('entity_type', 'node')->entityCondition('bundle', 'offer')->propertyCondition('status', 1)->fieldCondition('field_offer_trade', 'target_id', $trade, '=')->propertyOrderBy('created', 'DESC')->range(0, 1);
		$result = $query->execute();
		$offer = 0;
		if (isset($result['node']))
		{
			foreach ($result['node'] as $node)
			{
				$offer_id = $node->nid;
				$offer_wrapper = entity_metadata_wrapper('node', $offer_id);
				//取得对应job
				$job =                    entity_metadata_wrapper('node', $trade)->field_trade_job->value()->nid;
				$job_wrapper = entity_metadata_wrapper('node', $job);
				if ($job_wrapper->field_job_commission_time->value() > 0)
				{
					$commission_date = strtotime("+".$job_wrapper->field_job_commission_time->value()." days", $offer_wrapper->field_calendar_date->value());
				}
				else
				{
					$commission_date = $offer_wrapper->field_calendar_date->value();
				}
				$result_str .= '<div>佣金日:'.date('Y-m-d', $commission_date).'</div>';
			}
		}
	}
	else if ($status_name == '交易成功')
	{
		//取得对应job
		$job =             entity_metadata_wrapper('node', $trade)->field_trade_job->value()->nid;
		$job_wrapper = entity_metadata_wrapper('node', $job);
		if ($job_wrapper->field_job_commission->value() > 0)
		{
			$commission = $job_wrapper->field_job_commission->value();
		}
		else
		{
			$commission = 0;
		}
		$trade_hunter_score = '';
		//查找最新企业给出的trade company score
		$query = new EntityFieldQuery();
		$query->entityCondition('entity_type', 'node')->entityCondition('bundle', 'trade_company_score')->propertyCondition('status', 1)->fieldCondition('field_trade_company_score_trade', 'target_id', $trade, '=')->propertyOrderBy('created', 'DESC')->range(0, 1);
		$result = $query->execute();
		$offer = 0;
		if (isset($result['node']))
		{
		}
		else
		{
			$score_div = "<div class='score_choose' style='position:absolute; top:20px; width=100px; display:none; background-color: white; border: 1px black solid; padding: 10px'>";
			$score_div .= '<div>总体评价:</div>';
			$score_div .= '<div><input type="button" value="好评" /></div>';
			$score_div .= '<div><input type="button" value="中评" /></div>';
			$score_div .= '<div><input type="button" value="差评" /></div>';
			$score_div .= '</div>';
			$trade_company_score .= '<div style="position:relative"><input class="score_company" type="button" value="给企业评价"></button>'.$score_div.'</div>';
		}
		//查找最新企业给出的trade hunter score
		$query = new EntityFieldQuery();
		$query->entityCondition('entity_type', 'node')->entityCondition('bundle', 'trade_hunter_score')->propertyCondition('status', 1)->fieldCondition('field_trade_hunter_score_trade', 'target_id', $trade, '=')->propertyOrderBy('created', 'DESC')->range(0, 1);
		$result = $query->execute();
		$offer = 0;
		if (isset($result['node']))
		{
			foreach ($result['node'] as $node)
			{
				$trade_hunter_score .= '<div style="position:relative" class="trade_hunter_score" id="'.$node->nid.'"><a href="#">查看评价</a><div class="score"></div></div>';
			}
		}
		else
		{
			$trade_hunter_score = '<div>等待企业给出评价</div>';
		}
		if ($job_wrapper->field_job_commission->value() > 0)
		{
			$commission = $job_wrapper->field_job_commission->value();
		}
		else
		{
			$commission = 0;
		}
		$result_str .= '<div class="offer_info" style="width:180px; display:inline-block">';
		$result_str .= '	<div>获得佣金:'.$commission.'</div>';
		$result_str .= '</div>';
		$result_str .= '<div class="reply" style="width:116px; display:inline-block">';
		$result_str .= $trade_company_score;
		$result_str .= $trade_hunter_score;
		$result_str .= '</div>';
	}
	return $result_str;
}

function cw_interview_ajax_access()
{
	return true;
}

function cw_interview_reply_access($interview_invite)
{
	//根据$interview_invite取得交易
	$trade =                             entity_metadata_wrapper('node', $interview_invite)->field_interview_trade->value()->nid;
	//查看交易的人才所有者是否是当前用户
	global $user;
	$talent =                             entity_metadata_wrapper('node', $trade)->field_trade_talent->value()->nid;
	return (entity_metadata_wrapper('node', $talent)->author->uid->value() == $user->uid);
}

function cw_offer_reply_access($offer)
{
	//根据$offer取得交易
	$trade =                             entity_metadata_wrapper('node', $offer)->field_offer_trade->value()->nid;
	//查看交易的人才所有者是否是当前用户
	global $user;
	$talent =                             entity_metadata_wrapper('node', $trade)->field_trade_talent->value()->nid;
	return (entity_metadata_wrapper('node', $talent)->author->uid->value() == $user->uid);
}

function cw_general_interview_reply($interview_invite, $result, $time_or_reject_note)
{
	if ($result == 'accept_interview')
	{
		//设置面试邀请状态为"接受"
		$interview_invite_wrapper = entity_metadata_wrapper('node', $interview_invite);
		$get_term = taxonomy_get_term_by_name('接受', 'invite_status');
		$interview_invite_wrapper->field_interview_status->set(array_pop($get_term)->tid);
		$interview_invite_wrapper->field_calendar_date->set($time_or_reject_note);
		$interview_invite_wrapper->save();
		//设置交易状态为"面试接受"
		$trade =    entity_metadata_wrapper('node', $interview_invite)->field_interview_trade->value()->nid;
		$wrapper = entity_metadata_wrapper('node', $trade);
		$get_term = taxonomy_get_term_by_name('接受面试', 'term_trade_status');
		$wrapper->field_trade_status->set(array_pop($get_term)->tid);
		$wrapper->revision->set(1);
		$wrapper->save();
	}
	else if ($result == 'reject_interview')
	{
		//设置面试邀请状态为"拒绝"
		$interview_invite_wrapper = entity_metadata_wrapper('node', $interview_invite);
		$get_term = taxonomy_get_term_by_name('拒绝', 'invite_status');
		$interview_invite_wrapper->field_interview_status->set(array_pop($get_term)->tid);
		$interview_invite_wrapper->field_interview_reject_note->set($time_or_reject_note);
		$interview_invite_wrapper->save();
		//设置交易状态为"拒绝面试"
		$trade =                                    entity_metadata_wrapper('node', $interview_invite)->field_interview_trade->value()->nid;
		$wrapper = entity_metadata_wrapper('node', $trade);
		$get_term = taxonomy_get_term_by_name('拒绝面试', 'term_trade_status');
		$wrapper->field_trade_status->set(array_pop($get_term)->tid);
		$wrapper->revision=1;
		$wrapper->save();
	}
}

function cw_general_offer_reply($offer, $result, $emptystr_or_reject_note)
{
	if ($result == 'accept_offer')
	{
		//设置offer状态为"接受"
		$offer_wrapper = entity_metadata_wrapper('node', $offer);
		$get_term = taxonomy_get_term_by_name('接受', 'invite_status');
		$offer_wrapper->field_offer_status->set(array_pop($get_term)->tid);
		$offer_wrapper->save();
		//设置交易状态为"接受offer"
		$trade =                             entity_metadata_wrapper('node', $offer)->field_offer_trade->value()->nid;
		$wrapper = entity_metadata_wrapper('node', $trade);
		$get_term = taxonomy_get_term_by_name('接受offer', 'term_trade_status');
		$wrapper->field_trade_status->set(array_pop($get_term)->tid);
		$wrapper->save();
	}
	else if ($result == 'reject_offer')
	{
		//设置offer状态为"拒绝"
		$offer_wrapper = entity_metadata_wrapper('node', $offer);
		$get_term = taxonomy_get_term_by_name('拒绝', 'invite_status');
		$offer_wrapper->field_offer_status->set(array_pop($get_term)->tid);
		$offer_wrapper->field_offer_reject_note->set($emptystr_or_reject_note);
		$offer_wrapper->save();
		//设置交易状态为"拒绝offer"
		$trade =                             entity_metadata_wrapper('node', $offer)->field_offer_trade->value()->nid;
		$wrapper = entity_metadata_wrapper('node', $trade);
		$get_term = taxonomy_get_term_by_name('拒绝offer', 'term_trade_status');
		$wrapper->field_trade_status->set(array_pop($get_term)->tid);
		$wrapper->save();
	}
}

function cw_general_get_interview_choose_option($interview_invite)
{
	$interview_invite_obj = node_load($interview_invite);
	$interview_arrangement = node_load($interview_invite_obj->field_interview_arrangement['und'][0]['target_id']);
	if (!empty($interview_arrangement->field_interview_duration['und'][0]['value']) && $interview_arrangement->field_interview_duration['und'][0]['value'] <= 30)
	{
		//面试时间点间隔分钟数
		$interval = 30;
	}
	else
	{
		//面试时间点间隔分钟数
		$interval = 60;
	}
	//所有可选时间
	$option = array();
	$wrapper = entity_metadata_wrapper('node', $interview_arrangement);
	foreach ($wrapper->field_interview_choose as $i)
	{
		$start_time = $i->field_start_time->value();
		$end_time = $i->field_end_time->value();
		//开始时间取整
		if (date("i", $start_time) != 0)
		{
			// add interval to the time
			$start_time = $start_time + ($interval * 60);
		}
		// round DOWN to nearest half hour
		$start_time = floor($start_time / ($interval * 60)) * ($interval * 60);
		//结束时间取整
		// round DOWN to nearest half hour
		$end_time = floor($end_time / ($interval * 60)) * ($interval * 60);
		$tNow = $start_time;
		$tEnd = $end_time;
		while ($tNow <= $tEnd)
		{
			$day = date("Y_m_d", $tNow);
			$hour = date("H", $tNow);
			$minute = date("i", $tNow);
			if (!isset($option[$day]))
			{
				$option[$day] = array();
			}
			if (!isset($option[$day][$hour]))
			{
				$option[$day][$hour] = array();
			}
			if (!in_array($minute, $option[$day][$hour]))
			{
				array_push($option[$day][$hour], $minute);
			}
			$tNow = strtotime('+'.$interval.' minutes', $tNow);
		}
	}
	ksort($option);
	//取得已经预约的时间点
	$get_term = taxonomy_get_term_by_name('接受', 'invite_status');
	$term_id =                                                       array_pop($get_term)->tid;
	$sub_query = new EntityFieldQuery();
	$sub_query->entityCondition('entity_type', 'node')->entityCondition('bundle', 'interview_invite')->propertyCondition('status', 1)->fieldCondition('field_interview_status', 'tid', $term_id, '=');
	$sub_result = $sub_query->execute();
	$option_occupied = array();
	if (isset($sub_result['node']))
	{
		foreach ($sub_result['node'] as $sub_node)
		{
			$sub_interview_invite = node_load($sub_node->nid);
			$wrapper = entity_metadata_wrapper('node', $sub_interview_invite);
			$tNow = $wrapper->field_calendar_date->value();
			$day = date("Y_m_d", $tNow);
			$hour = date("H", $tNow);
			$minute = date("i", $tNow);
			if (!isset($option_occupied[$day]))
			{
				$option_occupied[$day] = array();
			}
			if (!isset($option_occupied[$day][$hour]))
			{
				$option_occupied[$day][$hour] = array();
			}
			if (!in_array($minute, $option_occupied[$day][$hour]))
			{
				array_push($option_occupied[$day][$hour], $minute);
			}
		}
	}
	foreach ($option_occupied as $id_d=>$item_d)
	{
		foreach ($item_d as $id_h=>$item_h)
		{
			foreach ($item_h as $id_m=>$item_m)
			{
				if (isset($option[$id_d][$id_h][$id_m]))
				{
					unset($option[$id_d][$id_h][$id_m]);
				}
			}
			if (empty($option[$id_d][$id_h]))
			{
				unset($option[$id_d][$id_h]);
			}
		}
		if (empty($option[$id_d]))
		{
			unset($option[$id_d]);
		}
	}
	return $option;
}

function cw_general_get_interview_choose_option_day($interview_invite)
{
	echo cw_general_get_interview_choose_option_day_widget($interview_invite);
}

function cw_general_get_interview_choose_option_day_widget($interview_invite)
{
	$result_str = '';
	$option = cw_general_get_interview_choose_option($interview_invite);
	//有统一安排面试时间供选择
	//使用$option中元素构造时间选择列表
	$result_str .= '<select class="choose_day">';
	$result_str .= '<option value="">请选择</option>';
	foreach ($option as $id=>$item)
	{
		$result_str .= '<option value="'.$id.'">'.$id.'</option>';
	}
	$result_str .= "</select>";
	return $result_str;
}

function cw_general_get_interview_choose_option_hour($interview_invite, $day)
{
	$option = cw_general_get_interview_choose_option($interview_invite);
	//有统一安排面试时间供选择
	//使用$option中元素构造时间选择列表
	echo '<select class="choose_hour">';
	echo '<option value="">请选择</option>';
	foreach ($option[$day] as $id=>$item)
	{
		echo '<option value="'.$id.'">'.$id.'</option>';
	}
	echo "</select>";
}

function cw_general_get_interview_choose_option_minute($interview_invite, $day, $hour)
{
	$option = cw_general_get_interview_choose_option($interview_invite);
	//有统一安排面试时间供选择
	//使用$option中元素构造时间选择列表
	echo '<select class="choose_minute">';
	echo '<option value="">请选择</option>';
	foreach ($option[$day][$hour] as $id=>$item)
	{
		echo '<option value="'.$item.'">'.$item.'</option>';
	}
	echo "</select>";
}

function cw_general_check_fit_talent_access($nid)
{
	global $user;
	$node = node_load($nid);
	return (($node->type == 'job') && ($node->uid == $user->uid));
}

function cw_general_fit_talent($nid)
{
	//get job requirement
	$job = node_load($nid);
	$query = new EntityFieldQuery();
	$query->entityCondition('entity_type', 'node')->entityCondition('bundle', 'talent')->propertyCondition('status', 1);
	if (!empty($job->field_job_height_from['und'][0]['value']))
	{
		$query = $query->fieldCondition('field_talent_height', 'value', $job->field_job_height_from['und'][0]['value'], '>=');
	}
	if (!empty($job->field_job_height_to['und'][0]['value']))
	{
		$query = $query->fieldCondition('field_talent_height', 'value', $job->field_job_height_to['und'][0]['value'], '<=');
	}
	if (!empty($job->field_job_sex['und'][0]['tid']))
	{
		$query = $query->fieldCondition('field_talent_sex', 'tid', array($job->field_job_sex['und'][0]['tid']));
	}
	if (!empty($job->field_job_education['und'][0]['value']))
	{
		$query = $query->fieldCondition('field_talent_education', 'value', $job->field_job_education['und'][0]['value'], '>=');
	}
	if (!empty($job->field_job_city['und'][0]['tid']))
	{
		$query = $query->fieldCondition('field_talent_city', 'tid', array($job->field_job_city['und'][0]['tid']));
	}
	$query = $query->propertyOrderBy('created', 'DESC')->pager(3);
	$result = $query->execute();
	$output = '';
	if (!empty($result['node']))
	{
		$nids = array_keys($result['node']);
		$nodes = node_load_multiple($nids);
		$output = drupal_render(node_view_multiple($nodes));
		$output .= theme('pager', array('nodes'=>$nodes));
	}
	else
	{
		$output = t('No Result');
	}
	return $output;
}

/**
 * Implementation of hook_views_api().
 */
function cw_general_views_api()
{
	return array(
		'api'=>3.0,
		'path'=>drupal_get_path('module', 'cw_general').'/includes'
	);
}

function cw_general_views_query_alter(&$view, &$query)
{
	if ($view->name == 'job_list')
	{
		// make sure this is the correct view
		if (count($query->where[1]['conditions']))
		{
			foreach ($query->where[1]['conditions'] as &$cond)
			{
				if (is_string($cond['field']) && $cond['field'] == 'field_data_field_job_education.field_job_education_value')
				{
					$cond['operator'] = '<=';
					// override the operator (greater than and equal to)
				}
			}
		}
	}
	else if ($view->name == 'talent_list')
	{
		if (count($query->where[1]['conditions']))
		{
			foreach ($query->where[1]['conditions'] as &$cond)
			{
				if (is_string($cond['field']) && $cond['field'] == 'field_data_field_talent_height.field_talent_height_value')
				{
					if ($cond['value'][1] == '')
					{
						$cond['value'][1] = '999';
					}
					// override the operator (greater than and equal to)
				}
				else if (is_string($cond['field']) && $cond['field'] == 'field_data_field_talent_education.field_talent_education_value')
				{
					$cond['operator'] = '>=';
					// override the operator (greater than and equal to)
				}
			}
		}
	}
}
